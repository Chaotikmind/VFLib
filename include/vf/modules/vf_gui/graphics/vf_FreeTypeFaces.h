// Copyright (C) 2008 by Vinnie Falco, this file is part of VFLib.
// See the file README.md for licensing information.

#ifndef VF_FREETYPEFACES_VFHEADER
#define VF_FREETYPEFACES_VFHEADER

/** FreeType hinted fonts singleton.

*/
// This singleton uses FreeType to open font files and
// extract glyph outlines, with the option of using hinting
// at a customizable range of sizes.
class FreeTypeFaces
{
public:
  // Add a font file that has been loaded into memory.
  // If appendStyleToFaceName is false, the style name is
  // not added to the family name to create the typeface name.
  // For example "Helvetica Neue LT Com 65 Medium" becomes
  // "Helvetica Neue LT Com" if appendStyleToFaceName is false.
  //
  // This is useful when you have two styled versions of a face,
  // for example "Helvetica Neue LT Com 65 Medium" and
  // "Helvetica Neue LT Com 75 Bold" and you want to treat them
  // as a single font with an optional bold style. Adding both
  // of these faces with appendStyleToFaceName=false will allow them
  // to work as a single typeface named "Helvetica Neue LT Com"
  // while also respecting the bold flag in the Font object.
  //
  // On the other hand if you have many different weights of the
  // same font you might want appendStyleToFaceName=true so that
  // you can precisely identify which weight you want, for advanced
  // typographists.
  //
  // If useFreeTypeRendering is true and the font gets hinted,
  // it will use FreeType to rasterize the glyph outlines, taking
  // advantage of even more hinting information (if present).
  static void addFaceFromMemory (float minHintedHeight,
                                 float maxHintedHeight,
                                 bool useFreeTypeRendering,
                                 const void* faceFileData,
                                 int faceFileBytes,
                                 bool appendStyleToFaceName = false);

  // This will created a hinted or unhinted Typeface depending
  // on the size of the font, and the range of heights given when
  // the face was added. If the font does not match any faces
  // previoulsy added with addFaceFromMemory(), this function returns 0.
  static Typeface::Ptr createTypefaceForFont (const Font& font);
};

/* To use a hinted font for your entire application you will need to
   implement your own custom LookAndFeel, and override the getTypefaceForFont()
   function. This is an example of what mine looks like:

class CustomLookAndFeel
{
public:
  CustomLookAndFeel()
  {
    // Add the TrueType font "Helvetica Neue LT Com 65 Medium" and
    // activate hinting when the font height is between 7 and 12 inclusive.
    // The font data was generated by running the Juce BinaryBuilder
    // program on the actual TrueType font file (.ttf)
    FreeTypeFaces::getInstance()->addFaceFromMemory(
      7.f, 12.f,
      binaries::helveticaneueltcommd_ttf,
      binaries::helveticaneueltcommd_ttfSize);
  }

  // This function will replace the default sans serif font used
  // throughout the application to use our hinted FreeType face.
  const Typeface::Ptr CustomLookAndFeel::getTypefaceForFont (const Font &font)
  {
    Typeface::Ptr tf;

    String faceName (font.getTypefaceName());

    if (faceName == Font::getDefaultSansSerifFontName())
    {
      // use our hinted font
      Font f(font);
      f.setTypefaceName ("Helvetica Neue LT Com");
      tf = FreeTypeFaces::createTypefaceForFont (f);
    }

    if (!tf)
      tf = LookAndFeel::getTypefaceForFont (font);

    return tf;
  }
};
*/

#endif
